// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "jass.hxx"

namespace Jass
{
  // Generator
  // 

  const Generator::Name_type& Generator::
  Name () const
  {
    return this->Name_.get ();
  }

  Generator::Name_type& Generator::
  Name ()
  {
    return this->Name_.get ();
  }

  void Generator::
  Name (const Name_type& x)
  {
    this->Name_.set (x);
  }

  void Generator::
  Name (::std::auto_ptr< Name_type > x)
  {
    this->Name_.set (x);
  }

  const Generator::Sample_type& Generator::
  Sample () const
  {
    return this->Sample_.get ();
  }

  Generator::Sample_type& Generator::
  Sample ()
  {
    return this->Sample_.get ();
  }

  void Generator::
  Sample (const Sample_type& x)
  {
    this->Sample_.set (x);
  }

  void Generator::
  Sample (::std::auto_ptr< Sample_type > x)
  {
    this->Sample_.set (x);
  }

  const Generator::SampleStart_type& Generator::
  SampleStart () const
  {
    return this->SampleStart_.get ();
  }

  Generator::SampleStart_type& Generator::
  SampleStart ()
  {
    return this->SampleStart_.get ();
  }

  void Generator::
  SampleStart (const SampleStart_type& x)
  {
    this->SampleStart_.set (x);
  }

  const Generator::SampleEnd_type& Generator::
  SampleEnd () const
  {
    return this->SampleEnd_.get ();
  }

  Generator::SampleEnd_type& Generator::
  SampleEnd ()
  {
    return this->SampleEnd_.get ();
  }

  void Generator::
  SampleEnd (const SampleEnd_type& x)
  {
    this->SampleEnd_.set (x);
  }

  const Generator::Looping_type& Generator::
  Looping () const
  {
    return this->Looping_.get ();
  }

  Generator::Looping_type& Generator::
  Looping ()
  {
    return this->Looping_.get ();
  }

  void Generator::
  Looping (const Looping_type& x)
  {
    this->Looping_.set (x);
  }

  const Generator::Gain_type& Generator::
  Gain () const
  {
    return this->Gain_.get ();
  }

  Generator::Gain_type& Generator::
  Gain ()
  {
    return this->Gain_.get ();
  }

  void Generator::
  Gain (const Gain_type& x)
  {
    this->Gain_.set (x);
  }

  const Generator::Polyphony_type& Generator::
  Polyphony () const
  {
    return this->Polyphony_.get ();
  }

  Generator::Polyphony_type& Generator::
  Polyphony ()
  {
    return this->Polyphony_.get ();
  }

  void Generator::
  Polyphony (const Polyphony_type& x)
  {
    this->Polyphony_.set (x);
  }

  const Generator::Channel_type& Generator::
  Channel () const
  {
    return this->Channel_.get ();
  }

  Generator::Channel_type& Generator::
  Channel ()
  {
    return this->Channel_.get ();
  }

  void Generator::
  Channel (const Channel_type& x)
  {
    this->Channel_.set (x);
  }

  const Generator::Note_type& Generator::
  Note () const
  {
    return this->Note_.get ();
  }

  Generator::Note_type& Generator::
  Note ()
  {
    return this->Note_.get ();
  }

  void Generator::
  Note (const Note_type& x)
  {
    this->Note_.set (x);
  }

  const Generator::MinNote_type& Generator::
  MinNote () const
  {
    return this->MinNote_.get ();
  }

  Generator::MinNote_type& Generator::
  MinNote ()
  {
    return this->MinNote_.get ();
  }

  void Generator::
  MinNote (const MinNote_type& x)
  {
    this->MinNote_.set (x);
  }

  const Generator::MaxNote_type& Generator::
  MaxNote () const
  {
    return this->MaxNote_.get ();
  }

  Generator::MaxNote_type& Generator::
  MaxNote ()
  {
    return this->MaxNote_.get ();
  }

  void Generator::
  MaxNote (const MaxNote_type& x)
  {
    this->MaxNote_.set (x);
  }

  const Generator::MinVelocity_type& Generator::
  MinVelocity () const
  {
    return this->MinVelocity_.get ();
  }

  Generator::MinVelocity_type& Generator::
  MinVelocity ()
  {
    return this->MinVelocity_.get ();
  }

  void Generator::
  MinVelocity (const MinVelocity_type& x)
  {
    this->MinVelocity_.set (x);
  }

  const Generator::MaxVelocity_type& Generator::
  MaxVelocity () const
  {
    return this->MaxVelocity_.get ();
  }

  Generator::MaxVelocity_type& Generator::
  MaxVelocity ()
  {
    return this->MaxVelocity_.get ();
  }

  void Generator::
  MaxVelocity (const MaxVelocity_type& x)
  {
    this->MaxVelocity_.set (x);
  }

  const Generator::VelocityFactor_type& Generator::
  VelocityFactor () const
  {
    return this->VelocityFactor_.get ();
  }

  Generator::VelocityFactor_type& Generator::
  VelocityFactor ()
  {
    return this->VelocityFactor_.get ();
  }

  void Generator::
  VelocityFactor (const VelocityFactor_type& x)
  {
    this->VelocityFactor_.set (x);
  }

  const Generator::AttackGain_type& Generator::
  AttackGain () const
  {
    return this->AttackGain_.get ();
  }

  Generator::AttackGain_type& Generator::
  AttackGain ()
  {
    return this->AttackGain_.get ();
  }

  void Generator::
  AttackGain (const AttackGain_type& x)
  {
    this->AttackGain_.set (x);
  }

  const Generator::DecayGain_type& Generator::
  DecayGain () const
  {
    return this->DecayGain_.get ();
  }

  Generator::DecayGain_type& Generator::
  DecayGain ()
  {
    return this->DecayGain_.get ();
  }

  void Generator::
  DecayGain (const DecayGain_type& x)
  {
    this->DecayGain_.set (x);
  }

  const Generator::SustainGain_type& Generator::
  SustainGain () const
  {
    return this->SustainGain_.get ();
  }

  Generator::SustainGain_type& Generator::
  SustainGain ()
  {
    return this->SustainGain_.get ();
  }

  void Generator::
  SustainGain (const SustainGain_type& x)
  {
    this->SustainGain_.set (x);
  }

  const Generator::ReleaseGain_type& Generator::
  ReleaseGain () const
  {
    return this->ReleaseGain_.get ();
  }

  Generator::ReleaseGain_type& Generator::
  ReleaseGain ()
  {
    return this->ReleaseGain_.get ();
  }

  void Generator::
  ReleaseGain (const ReleaseGain_type& x)
  {
    this->ReleaseGain_.set (x);
  }

  const Generator::Filter_type& Generator::
  Filter () const
  {
    return this->Filter_.get ();
  }

  Generator::Filter_type& Generator::
  Filter ()
  {
    return this->Filter_.get ();
  }

  void Generator::
  Filter (const Filter_type& x)
  {
    this->Filter_.set (x);
  }

  const Generator::FreqFilter_type& Generator::
  FreqFilter () const
  {
    return this->FreqFilter_.get ();
  }

  Generator::FreqFilter_type& Generator::
  FreqFilter ()
  {
    return this->FreqFilter_.get ();
  }

  void Generator::
  FreqFilter (const FreqFilter_type& x)
  {
    this->FreqFilter_.set (x);
  }

  const Generator::QFilter_type& Generator::
  QFilter () const
  {
    return this->QFilter_.get ();
  }

  Generator::QFilter_type& Generator::
  QFilter ()
  {
    return this->QFilter_.get ();
  }

  void Generator::
  QFilter (const QFilter_type& x)
  {
    this->QFilter_.set (x);
  }

  const Generator::KeyFollowFilter_type& Generator::
  KeyFollowFilter () const
  {
    return this->KeyFollowFilter_.get ();
  }

  Generator::KeyFollowFilter_type& Generator::
  KeyFollowFilter ()
  {
    return this->KeyFollowFilter_.get ();
  }

  void Generator::
  KeyFollowFilter (const KeyFollowFilter_type& x)
  {
    this->KeyFollowFilter_.set (x);
  }

  const Generator::AttackFilter_type& Generator::
  AttackFilter () const
  {
    return this->AttackFilter_.get ();
  }

  Generator::AttackFilter_type& Generator::
  AttackFilter ()
  {
    return this->AttackFilter_.get ();
  }

  void Generator::
  AttackFilter (const AttackFilter_type& x)
  {
    this->AttackFilter_.set (x);
  }

  const Generator::DecayFilter_type& Generator::
  DecayFilter () const
  {
    return this->DecayFilter_.get ();
  }

  Generator::DecayFilter_type& Generator::
  DecayFilter ()
  {
    return this->DecayFilter_.get ();
  }

  void Generator::
  DecayFilter (const DecayFilter_type& x)
  {
    this->DecayFilter_.set (x);
  }

  const Generator::SustainFilter_type& Generator::
  SustainFilter () const
  {
    return this->SustainFilter_.get ();
  }

  Generator::SustainFilter_type& Generator::
  SustainFilter ()
  {
    return this->SustainFilter_.get ();
  }

  void Generator::
  SustainFilter (const SustainFilter_type& x)
  {
    this->SustainFilter_.set (x);
  }

  const Generator::ReleaseFilter_type& Generator::
  ReleaseFilter () const
  {
    return this->ReleaseFilter_.get ();
  }

  Generator::ReleaseFilter_type& Generator::
  ReleaseFilter ()
  {
    return this->ReleaseFilter_.get ();
  }

  void Generator::
  ReleaseFilter (const ReleaseFilter_type& x)
  {
    this->ReleaseFilter_.set (x);
  }


  // Jass
  // 

  const Jass::Generator_sequence& Jass::
  Generator () const
  {
    return this->Generator_;
  }

  Jass::Generator_sequence& Jass::
  Generator ()
  {
    return this->Generator_;
  }

  void Jass::
  Generator (const Generator_sequence& s)
  {
    this->Generator_ = s;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Jass
{
  // Generator
  //

  Generator::
  Generator (const Name_type& Name,
             const Sample_type& Sample,
             const SampleStart_type& SampleStart,
             const SampleEnd_type& SampleEnd,
             const Looping_type& Looping,
             const Gain_type& Gain,
             const Polyphony_type& Polyphony,
             const Channel_type& Channel,
             const Note_type& Note,
             const MinNote_type& MinNote,
             const MaxNote_type& MaxNote,
             const MinVelocity_type& MinVelocity,
             const MaxVelocity_type& MaxVelocity,
             const VelocityFactor_type& VelocityFactor,
             const AttackGain_type& AttackGain,
             const DecayGain_type& DecayGain,
             const SustainGain_type& SustainGain,
             const ReleaseGain_type& ReleaseGain,
             const Filter_type& Filter,
             const FreqFilter_type& FreqFilter,
             const QFilter_type& QFilter,
             const KeyFollowFilter_type& KeyFollowFilter,
             const AttackFilter_type& AttackFilter,
             const DecayFilter_type& DecayFilter,
             const SustainFilter_type& SustainFilter,
             const ReleaseFilter_type& ReleaseFilter)
  : ::xml_schema::type (),
    Name_ (Name, ::xml_schema::flags (), this),
    Sample_ (Sample, ::xml_schema::flags (), this),
    SampleStart_ (SampleStart, ::xml_schema::flags (), this),
    SampleEnd_ (SampleEnd, ::xml_schema::flags (), this),
    Looping_ (Looping, ::xml_schema::flags (), this),
    Gain_ (Gain, ::xml_schema::flags (), this),
    Polyphony_ (Polyphony, ::xml_schema::flags (), this),
    Channel_ (Channel, ::xml_schema::flags (), this),
    Note_ (Note, ::xml_schema::flags (), this),
    MinNote_ (MinNote, ::xml_schema::flags (), this),
    MaxNote_ (MaxNote, ::xml_schema::flags (), this),
    MinVelocity_ (MinVelocity, ::xml_schema::flags (), this),
    MaxVelocity_ (MaxVelocity, ::xml_schema::flags (), this),
    VelocityFactor_ (VelocityFactor, ::xml_schema::flags (), this),
    AttackGain_ (AttackGain, ::xml_schema::flags (), this),
    DecayGain_ (DecayGain, ::xml_schema::flags (), this),
    SustainGain_ (SustainGain, ::xml_schema::flags (), this),
    ReleaseGain_ (ReleaseGain, ::xml_schema::flags (), this),
    Filter_ (Filter, ::xml_schema::flags (), this),
    FreqFilter_ (FreqFilter, ::xml_schema::flags (), this),
    QFilter_ (QFilter, ::xml_schema::flags (), this),
    KeyFollowFilter_ (KeyFollowFilter, ::xml_schema::flags (), this),
    AttackFilter_ (AttackFilter, ::xml_schema::flags (), this),
    DecayFilter_ (DecayFilter, ::xml_schema::flags (), this),
    SustainFilter_ (SustainFilter, ::xml_schema::flags (), this),
    ReleaseFilter_ (ReleaseFilter, ::xml_schema::flags (), this)
  {
  }

  Generator::
  Generator (const Generator& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Name_ (x.Name_, f, this),
    Sample_ (x.Sample_, f, this),
    SampleStart_ (x.SampleStart_, f, this),
    SampleEnd_ (x.SampleEnd_, f, this),
    Looping_ (x.Looping_, f, this),
    Gain_ (x.Gain_, f, this),
    Polyphony_ (x.Polyphony_, f, this),
    Channel_ (x.Channel_, f, this),
    Note_ (x.Note_, f, this),
    MinNote_ (x.MinNote_, f, this),
    MaxNote_ (x.MaxNote_, f, this),
    MinVelocity_ (x.MinVelocity_, f, this),
    MaxVelocity_ (x.MaxVelocity_, f, this),
    VelocityFactor_ (x.VelocityFactor_, f, this),
    AttackGain_ (x.AttackGain_, f, this),
    DecayGain_ (x.DecayGain_, f, this),
    SustainGain_ (x.SustainGain_, f, this),
    ReleaseGain_ (x.ReleaseGain_, f, this),
    Filter_ (x.Filter_, f, this),
    FreqFilter_ (x.FreqFilter_, f, this),
    QFilter_ (x.QFilter_, f, this),
    KeyFollowFilter_ (x.KeyFollowFilter_, f, this),
    AttackFilter_ (x.AttackFilter_, f, this),
    DecayFilter_ (x.DecayFilter_, f, this),
    SustainFilter_ (x.SustainFilter_, f, this),
    ReleaseFilter_ (x.ReleaseFilter_, f, this)
  {
  }

  Generator::
  Generator (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Name_ (f, this),
    Sample_ (f, this),
    SampleStart_ (f, this),
    SampleEnd_ (f, this),
    Looping_ (f, this),
    Gain_ (f, this),
    Polyphony_ (f, this),
    Channel_ (f, this),
    Note_ (f, this),
    MinNote_ (f, this),
    MaxNote_ (f, this),
    MinVelocity_ (f, this),
    MaxVelocity_ (f, this),
    VelocityFactor_ (f, this),
    AttackGain_ (f, this),
    DecayGain_ (f, this),
    SustainGain_ (f, this),
    ReleaseGain_ (f, this),
    Filter_ (f, this),
    FreqFilter_ (f, this),
    QFilter_ (f, this),
    KeyFollowFilter_ (f, this),
    AttackFilter_ (f, this),
    DecayFilter_ (f, this),
    SustainFilter_ (f, this),
    ReleaseFilter_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void Generator::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Name
      //
      if (n.name () == "Name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Name_type > r (
          Name_traits::create (i, f, this));

        if (!Name_.present ())
        {
          this->Name_.set (r);
          continue;
        }
      }

      // Sample
      //
      if (n.name () == "Sample" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Sample_type > r (
          Sample_traits::create (i, f, this));

        if (!Sample_.present ())
        {
          this->Sample_.set (r);
          continue;
        }
      }

      // SampleStart
      //
      if (n.name () == "SampleStart" && n.namespace_ ().empty ())
      {
        if (!SampleStart_.present ())
        {
          this->SampleStart_.set (SampleStart_traits::create (i, f, this));
          continue;
        }
      }

      // SampleEnd
      //
      if (n.name () == "SampleEnd" && n.namespace_ ().empty ())
      {
        if (!SampleEnd_.present ())
        {
          this->SampleEnd_.set (SampleEnd_traits::create (i, f, this));
          continue;
        }
      }

      // Looping
      //
      if (n.name () == "Looping" && n.namespace_ ().empty ())
      {
        if (!Looping_.present ())
        {
          this->Looping_.set (Looping_traits::create (i, f, this));
          continue;
        }
      }

      // Gain
      //
      if (n.name () == "Gain" && n.namespace_ ().empty ())
      {
        if (!Gain_.present ())
        {
          this->Gain_.set (Gain_traits::create (i, f, this));
          continue;
        }
      }

      // Polyphony
      //
      if (n.name () == "Polyphony" && n.namespace_ ().empty ())
      {
        if (!Polyphony_.present ())
        {
          this->Polyphony_.set (Polyphony_traits::create (i, f, this));
          continue;
        }
      }

      // Channel
      //
      if (n.name () == "Channel" && n.namespace_ ().empty ())
      {
        if (!Channel_.present ())
        {
          this->Channel_.set (Channel_traits::create (i, f, this));
          continue;
        }
      }

      // Note
      //
      if (n.name () == "Note" && n.namespace_ ().empty ())
      {
        if (!Note_.present ())
        {
          this->Note_.set (Note_traits::create (i, f, this));
          continue;
        }
      }

      // MinNote
      //
      if (n.name () == "MinNote" && n.namespace_ ().empty ())
      {
        if (!MinNote_.present ())
        {
          this->MinNote_.set (MinNote_traits::create (i, f, this));
          continue;
        }
      }

      // MaxNote
      //
      if (n.name () == "MaxNote" && n.namespace_ ().empty ())
      {
        if (!MaxNote_.present ())
        {
          this->MaxNote_.set (MaxNote_traits::create (i, f, this));
          continue;
        }
      }

      // MinVelocity
      //
      if (n.name () == "MinVelocity" && n.namespace_ ().empty ())
      {
        if (!MinVelocity_.present ())
        {
          this->MinVelocity_.set (MinVelocity_traits::create (i, f, this));
          continue;
        }
      }

      // MaxVelocity
      //
      if (n.name () == "MaxVelocity" && n.namespace_ ().empty ())
      {
        if (!MaxVelocity_.present ())
        {
          this->MaxVelocity_.set (MaxVelocity_traits::create (i, f, this));
          continue;
        }
      }

      // VelocityFactor
      //
      if (n.name () == "VelocityFactor" && n.namespace_ ().empty ())
      {
        if (!VelocityFactor_.present ())
        {
          this->VelocityFactor_.set (VelocityFactor_traits::create (i, f, this));
          continue;
        }
      }

      // AttackGain
      //
      if (n.name () == "AttackGain" && n.namespace_ ().empty ())
      {
        if (!AttackGain_.present ())
        {
          this->AttackGain_.set (AttackGain_traits::create (i, f, this));
          continue;
        }
      }

      // DecayGain
      //
      if (n.name () == "DecayGain" && n.namespace_ ().empty ())
      {
        if (!DecayGain_.present ())
        {
          this->DecayGain_.set (DecayGain_traits::create (i, f, this));
          continue;
        }
      }

      // SustainGain
      //
      if (n.name () == "SustainGain" && n.namespace_ ().empty ())
      {
        if (!SustainGain_.present ())
        {
          this->SustainGain_.set (SustainGain_traits::create (i, f, this));
          continue;
        }
      }

      // ReleaseGain
      //
      if (n.name () == "ReleaseGain" && n.namespace_ ().empty ())
      {
        if (!ReleaseGain_.present ())
        {
          this->ReleaseGain_.set (ReleaseGain_traits::create (i, f, this));
          continue;
        }
      }

      // Filter
      //
      if (n.name () == "Filter" && n.namespace_ ().empty ())
      {
        if (!Filter_.present ())
        {
          this->Filter_.set (Filter_traits::create (i, f, this));
          continue;
        }
      }

      // FreqFilter
      //
      if (n.name () == "FreqFilter" && n.namespace_ ().empty ())
      {
        if (!FreqFilter_.present ())
        {
          this->FreqFilter_.set (FreqFilter_traits::create (i, f, this));
          continue;
        }
      }

      // QFilter
      //
      if (n.name () == "QFilter" && n.namespace_ ().empty ())
      {
        if (!QFilter_.present ())
        {
          this->QFilter_.set (QFilter_traits::create (i, f, this));
          continue;
        }
      }

      // KeyFollowFilter
      //
      if (n.name () == "KeyFollowFilter" && n.namespace_ ().empty ())
      {
        if (!KeyFollowFilter_.present ())
        {
          this->KeyFollowFilter_.set (KeyFollowFilter_traits::create (i, f, this));
          continue;
        }
      }

      // AttackFilter
      //
      if (n.name () == "AttackFilter" && n.namespace_ ().empty ())
      {
        if (!AttackFilter_.present ())
        {
          this->AttackFilter_.set (AttackFilter_traits::create (i, f, this));
          continue;
        }
      }

      // DecayFilter
      //
      if (n.name () == "DecayFilter" && n.namespace_ ().empty ())
      {
        if (!DecayFilter_.present ())
        {
          this->DecayFilter_.set (DecayFilter_traits::create (i, f, this));
          continue;
        }
      }

      // SustainFilter
      //
      if (n.name () == "SustainFilter" && n.namespace_ ().empty ())
      {
        if (!SustainFilter_.present ())
        {
          this->SustainFilter_.set (SustainFilter_traits::create (i, f, this));
          continue;
        }
      }

      // ReleaseFilter
      //
      if (n.name () == "ReleaseFilter" && n.namespace_ ().empty ())
      {
        if (!ReleaseFilter_.present ())
        {
          this->ReleaseFilter_.set (ReleaseFilter_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!Name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Name",
        "");
    }

    if (!Sample_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Sample",
        "");
    }

    if (!SampleStart_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "SampleStart",
        "");
    }

    if (!SampleEnd_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "SampleEnd",
        "");
    }

    if (!Looping_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Looping",
        "");
    }

    if (!Gain_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Gain",
        "");
    }

    if (!Polyphony_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Polyphony",
        "");
    }

    if (!Channel_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Channel",
        "");
    }

    if (!Note_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Note",
        "");
    }

    if (!MinNote_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "MinNote",
        "");
    }

    if (!MaxNote_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "MaxNote",
        "");
    }

    if (!MinVelocity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "MinVelocity",
        "");
    }

    if (!MaxVelocity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "MaxVelocity",
        "");
    }

    if (!VelocityFactor_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "VelocityFactor",
        "");
    }

    if (!AttackGain_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "AttackGain",
        "");
    }

    if (!DecayGain_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "DecayGain",
        "");
    }

    if (!SustainGain_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "SustainGain",
        "");
    }

    if (!ReleaseGain_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ReleaseGain",
        "");
    }

    if (!Filter_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Filter",
        "");
    }

    if (!FreqFilter_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "FreqFilter",
        "");
    }

    if (!QFilter_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "QFilter",
        "");
    }

    if (!KeyFollowFilter_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "KeyFollowFilter",
        "");
    }

    if (!AttackFilter_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "AttackFilter",
        "");
    }

    if (!DecayFilter_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "DecayFilter",
        "");
    }

    if (!SustainFilter_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "SustainFilter",
        "");
    }

    if (!ReleaseFilter_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ReleaseFilter",
        "");
    }
  }

  Generator* Generator::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Generator (*this, f, c);
  }

  Generator::
  ~Generator ()
  {
  }

  // Jass
  //

  Jass::
  Jass ()
  : ::xml_schema::type (),
    Generator_ (::xml_schema::flags (), this)
  {
  }

  Jass::
  Jass (const Jass& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Generator_ (x.Generator_, f, this)
  {
  }

  Jass::
  Jass (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Generator_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void Jass::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Generator
      //
      if (n.name () == "Generator" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Generator_type > r (
          Generator_traits::create (i, f, this));

        this->Generator_.push_back (r);
        continue;
      }

      break;
    }
  }

  Jass* Jass::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Jass (*this, f, c);
  }

  Jass::
  ~Jass ()
  {
  }
}

#include <ostream>

namespace Jass
{
  ::std::ostream&
  operator<< (::std::ostream& o, const Generator& i)
  {
    o << ::std::endl << "Name: " << i.Name ();
    o << ::std::endl << "Sample: " << i.Sample ();
    o << ::std::endl << "SampleStart: " << i.SampleStart ();
    o << ::std::endl << "SampleEnd: " << i.SampleEnd ();
    o << ::std::endl << "Looping: " << i.Looping ();
    o << ::std::endl << "Gain: " << i.Gain ();
    o << ::std::endl << "Polyphony: " << i.Polyphony ();
    o << ::std::endl << "Channel: " << i.Channel ();
    o << ::std::endl << "Note: " << i.Note ();
    o << ::std::endl << "MinNote: " << i.MinNote ();
    o << ::std::endl << "MaxNote: " << i.MaxNote ();
    o << ::std::endl << "MinVelocity: " << i.MinVelocity ();
    o << ::std::endl << "MaxVelocity: " << i.MaxVelocity ();
    o << ::std::endl << "VelocityFactor: " << i.VelocityFactor ();
    o << ::std::endl << "AttackGain: " << i.AttackGain ();
    o << ::std::endl << "DecayGain: " << i.DecayGain ();
    o << ::std::endl << "SustainGain: " << i.SustainGain ();
    o << ::std::endl << "ReleaseGain: " << i.ReleaseGain ();
    o << ::std::endl << "Filter: " << i.Filter ();
    o << ::std::endl << "FreqFilter: " << i.FreqFilter ();
    o << ::std::endl << "QFilter: " << i.QFilter ();
    o << ::std::endl << "KeyFollowFilter: " << i.KeyFollowFilter ();
    o << ::std::endl << "AttackFilter: " << i.AttackFilter ();
    o << ::std::endl << "DecayFilter: " << i.DecayFilter ();
    o << ::std::endl << "SustainFilter: " << i.SustainFilter ();
    o << ::std::endl << "ReleaseFilter: " << i.ReleaseFilter ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const Jass& i)
  {
    for (Jass::Generator_const_iterator
         b (i.Generator ().begin ()), e (i.Generator ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Generator: " << *b;
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Jass
{
  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::Jass::Jass > r (
      ::Jass::Jass_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::Jass::Jass > r (
      ::Jass::Jass_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::Jass::Jass > r (
      ::Jass::Jass_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::Jass::Jass_ (isrc, f, p);
  }

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::Jass::Jass_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::Jass::Jass_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::Jass::Jass_ (isrc, f, p);
  }

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::Jass::Jass_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::Jass::Jass_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::Jass::Jass > r (
      ::Jass::Jass_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::Jass::Jass > r (
      ::Jass::Jass_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::Jass::Jass > r (
      ::Jass::Jass_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::Jass::Jass > r (
        ::Jass::Jass_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Jass" &&
        n.namespace_ () == "http://shirkhan.dyndns.org/Jass")
    {
      ::std::auto_ptr< ::Jass::Jass > r (
        ::xsd::cxx::tree::traits< ::Jass::Jass, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Jass",
      "http://shirkhan.dyndns.org/Jass");
  }

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Jass" &&
        n.namespace_ () == "http://shirkhan.dyndns.org/Jass")
    {
      ::std::auto_ptr< ::Jass::Jass > r (
        ::xsd::cxx::tree::traits< ::Jass::Jass, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Jass",
      "http://shirkhan.dyndns.org/Jass");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Jass
{
  void
  Jass_ (::std::ostream& o,
         const ::Jass::Jass& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::Jass::Jass_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Jass_ (::std::ostream& o,
         const ::Jass::Jass& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::Jass::Jass_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Jass_ (::std::ostream& o,
         const ::Jass::Jass& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::Jass::Jass_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Jass_ (::xercesc::XMLFormatTarget& t,
         const ::Jass::Jass& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::Jass::Jass_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Jass_ (::xercesc::XMLFormatTarget& t,
         const ::Jass::Jass& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::Jass::Jass_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Jass_ (::xercesc::XMLFormatTarget& t,
         const ::Jass::Jass& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::Jass::Jass_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Jass_ (::xercesc::DOMDocument& d,
         const ::Jass::Jass& s,
         ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Jass" &&
        n.namespace_ () == "http://shirkhan.dyndns.org/Jass")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Jass",
        "http://shirkhan.dyndns.org/Jass");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Jass_ (const ::Jass::Jass& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "Jass",
        "http://shirkhan.dyndns.org/Jass",
        m, f));

    ::Jass::Jass_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const Generator& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // Name
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Name",
          e));

      s << i.Name ();
    }

    // Sample
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Sample",
          e));

      s << i.Sample ();
    }

    // SampleStart
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SampleStart",
          e));

      s << i.SampleStart ();
    }

    // SampleEnd
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SampleEnd",
          e));

      s << i.SampleEnd ();
    }

    // Looping
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Looping",
          e));

      s << i.Looping ();
    }

    // Gain
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Gain",
          e));

      s << i.Gain ();
    }

    // Polyphony
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Polyphony",
          e));

      s << i.Polyphony ();
    }

    // Channel
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Channel",
          e));

      s << i.Channel ();
    }

    // Note
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Note",
          e));

      s << i.Note ();
    }

    // MinNote
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "MinNote",
          e));

      s << i.MinNote ();
    }

    // MaxNote
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "MaxNote",
          e));

      s << i.MaxNote ();
    }

    // MinVelocity
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "MinVelocity",
          e));

      s << i.MinVelocity ();
    }

    // MaxVelocity
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "MaxVelocity",
          e));

      s << i.MaxVelocity ();
    }

    // VelocityFactor
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "VelocityFactor",
          e));

      s << i.VelocityFactor ();
    }

    // AttackGain
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "AttackGain",
          e));

      s << i.AttackGain ();
    }

    // DecayGain
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DecayGain",
          e));

      s << i.DecayGain ();
    }

    // SustainGain
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SustainGain",
          e));

      s << i.SustainGain ();
    }

    // ReleaseGain
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ReleaseGain",
          e));

      s << i.ReleaseGain ();
    }

    // Filter
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Filter",
          e));

      s << i.Filter ();
    }

    // FreqFilter
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "FreqFilter",
          e));

      s << i.FreqFilter ();
    }

    // QFilter
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "QFilter",
          e));

      s << i.QFilter ();
    }

    // KeyFollowFilter
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "KeyFollowFilter",
          e));

      s << i.KeyFollowFilter ();
    }

    // AttackFilter
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "AttackFilter",
          e));

      s << i.AttackFilter ();
    }

    // DecayFilter
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DecayFilter",
          e));

      s << i.DecayFilter ();
    }

    // SustainFilter
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SustainFilter",
          e));

      s << i.SustainFilter ();
    }

    // ReleaseFilter
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ReleaseFilter",
          e));

      s << i.ReleaseFilter ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Jass& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // Generator
    //
    for (Jass::Generator_const_iterator
         b (i.Generator ().begin ()), n (i.Generator ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Generator",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

