// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef JASS_HXX
#define JASS_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace Jass
{
  class Generator;
  class Jass;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Jass
{
  class Generator: public ::xml_schema::type
  {
    public:
    // Name
    // 
    typedef ::xml_schema::string Name_type;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_type&
    Name () const;

    Name_type&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (::std::auto_ptr< Name_type > p);

    // Sample
    // 
    typedef ::xml_schema::string Sample_type;
    typedef ::xsd::cxx::tree::traits< Sample_type, char > Sample_traits;

    const Sample_type&
    Sample () const;

    Sample_type&
    Sample ();

    void
    Sample (const Sample_type& x);

    void
    Sample (::std::auto_ptr< Sample_type > p);

    // SampleStart
    // 
    typedef ::xml_schema::non_negative_integer SampleStart_type;
    typedef ::xsd::cxx::tree::traits< SampleStart_type, char > SampleStart_traits;

    const SampleStart_type&
    SampleStart () const;

    SampleStart_type&
    SampleStart ();

    void
    SampleStart (const SampleStart_type& x);

    // SampleEnd
    // 
    typedef ::xml_schema::non_negative_integer SampleEnd_type;
    typedef ::xsd::cxx::tree::traits< SampleEnd_type, char > SampleEnd_traits;

    const SampleEnd_type&
    SampleEnd () const;

    SampleEnd_type&
    SampleEnd ();

    void
    SampleEnd (const SampleEnd_type& x);

    // Looping
    // 
    typedef ::xml_schema::boolean Looping_type;
    typedef ::xsd::cxx::tree::traits< Looping_type, char > Looping_traits;

    const Looping_type&
    Looping () const;

    Looping_type&
    Looping ();

    void
    Looping (const Looping_type& x);

    // Gain
    // 
    typedef ::xml_schema::float_ Gain_type;
    typedef ::xsd::cxx::tree::traits< Gain_type, char > Gain_traits;

    const Gain_type&
    Gain () const;

    Gain_type&
    Gain ();

    void
    Gain (const Gain_type& x);

    // Channel
    // 
    typedef ::xml_schema::non_negative_integer Channel_type;
    typedef ::xsd::cxx::tree::traits< Channel_type, char > Channel_traits;

    const Channel_type&
    Channel () const;

    Channel_type&
    Channel ();

    void
    Channel (const Channel_type& x);

    // Note
    // 
    typedef ::xml_schema::non_negative_integer Note_type;
    typedef ::xsd::cxx::tree::traits< Note_type, char > Note_traits;

    const Note_type&
    Note () const;

    Note_type&
    Note ();

    void
    Note (const Note_type& x);

    // MinNote
    // 
    typedef ::xml_schema::non_negative_integer MinNote_type;
    typedef ::xsd::cxx::tree::traits< MinNote_type, char > MinNote_traits;

    const MinNote_type&
    MinNote () const;

    MinNote_type&
    MinNote ();

    void
    MinNote (const MinNote_type& x);

    // MaxNote
    // 
    typedef ::xml_schema::non_negative_integer MaxNote_type;
    typedef ::xsd::cxx::tree::traits< MaxNote_type, char > MaxNote_traits;

    const MaxNote_type&
    MaxNote () const;

    MaxNote_type&
    MaxNote ();

    void
    MaxNote (const MaxNote_type& x);

    // MinVelocity
    // 
    typedef ::xml_schema::non_negative_integer MinVelocity_type;
    typedef ::xsd::cxx::tree::traits< MinVelocity_type, char > MinVelocity_traits;

    const MinVelocity_type&
    MinVelocity () const;

    MinVelocity_type&
    MinVelocity ();

    void
    MinVelocity (const MinVelocity_type& x);

    // MaxVelocity
    // 
    typedef ::xml_schema::non_negative_integer MaxVelocity_type;
    typedef ::xsd::cxx::tree::traits< MaxVelocity_type, char > MaxVelocity_traits;

    const MaxVelocity_type&
    MaxVelocity () const;

    MaxVelocity_type&
    MaxVelocity ();

    void
    MaxVelocity (const MaxVelocity_type& x);

    // VelocityFactor
    // 
    typedef ::xml_schema::float_ VelocityFactor_type;
    typedef ::xsd::cxx::tree::traits< VelocityFactor_type, char > VelocityFactor_traits;

    const VelocityFactor_type&
    VelocityFactor () const;

    VelocityFactor_type&
    VelocityFactor ();

    void
    VelocityFactor (const VelocityFactor_type& x);

    // AttackGain
    // 
    typedef ::xml_schema::float_ AttackGain_type;
    typedef ::xsd::cxx::tree::traits< AttackGain_type, char > AttackGain_traits;

    const AttackGain_type&
    AttackGain () const;

    AttackGain_type&
    AttackGain ();

    void
    AttackGain (const AttackGain_type& x);

    // DecayGain
    // 
    typedef ::xml_schema::float_ DecayGain_type;
    typedef ::xsd::cxx::tree::traits< DecayGain_type, char > DecayGain_traits;

    const DecayGain_type&
    DecayGain () const;

    DecayGain_type&
    DecayGain ();

    void
    DecayGain (const DecayGain_type& x);

    // SustainGain
    // 
    typedef ::xml_schema::float_ SustainGain_type;
    typedef ::xsd::cxx::tree::traits< SustainGain_type, char > SustainGain_traits;

    const SustainGain_type&
    SustainGain () const;

    SustainGain_type&
    SustainGain ();

    void
    SustainGain (const SustainGain_type& x);

    // ReleaseGain
    // 
    typedef ::xml_schema::float_ ReleaseGain_type;
    typedef ::xsd::cxx::tree::traits< ReleaseGain_type, char > ReleaseGain_traits;

    const ReleaseGain_type&
    ReleaseGain () const;

    ReleaseGain_type&
    ReleaseGain ();

    void
    ReleaseGain (const ReleaseGain_type& x);

    // Filter
    // 
    typedef ::xml_schema::non_negative_integer Filter_type;
    typedef ::xsd::cxx::tree::traits< Filter_type, char > Filter_traits;

    const Filter_type&
    Filter () const;

    Filter_type&
    Filter ();

    void
    Filter (const Filter_type& x);

    // FreqFilter
    // 
    typedef ::xml_schema::float_ FreqFilter_type;
    typedef ::xsd::cxx::tree::traits< FreqFilter_type, char > FreqFilter_traits;

    const FreqFilter_type&
    FreqFilter () const;

    FreqFilter_type&
    FreqFilter ();

    void
    FreqFilter (const FreqFilter_type& x);

    // QFilter
    // 
    typedef ::xml_schema::float_ QFilter_type;
    typedef ::xsd::cxx::tree::traits< QFilter_type, char > QFilter_traits;

    const QFilter_type&
    QFilter () const;

    QFilter_type&
    QFilter ();

    void
    QFilter (const QFilter_type& x);

    // KeyFollowFilter
    // 
    typedef ::xml_schema::float_ KeyFollowFilter_type;
    typedef ::xsd::cxx::tree::traits< KeyFollowFilter_type, char > KeyFollowFilter_traits;

    const KeyFollowFilter_type&
    KeyFollowFilter () const;

    KeyFollowFilter_type&
    KeyFollowFilter ();

    void
    KeyFollowFilter (const KeyFollowFilter_type& x);

    // AttackFilter
    // 
    typedef ::xml_schema::float_ AttackFilter_type;
    typedef ::xsd::cxx::tree::traits< AttackFilter_type, char > AttackFilter_traits;

    const AttackFilter_type&
    AttackFilter () const;

    AttackFilter_type&
    AttackFilter ();

    void
    AttackFilter (const AttackFilter_type& x);

    // DecayFilter
    // 
    typedef ::xml_schema::float_ DecayFilter_type;
    typedef ::xsd::cxx::tree::traits< DecayFilter_type, char > DecayFilter_traits;

    const DecayFilter_type&
    DecayFilter () const;

    DecayFilter_type&
    DecayFilter ();

    void
    DecayFilter (const DecayFilter_type& x);

    // SustainFilter
    // 
    typedef ::xml_schema::float_ SustainFilter_type;
    typedef ::xsd::cxx::tree::traits< SustainFilter_type, char > SustainFilter_traits;

    const SustainFilter_type&
    SustainFilter () const;

    SustainFilter_type&
    SustainFilter ();

    void
    SustainFilter (const SustainFilter_type& x);

    // ReleaseFilter
    // 
    typedef ::xml_schema::float_ ReleaseFilter_type;
    typedef ::xsd::cxx::tree::traits< ReleaseFilter_type, char > ReleaseFilter_traits;

    const ReleaseFilter_type&
    ReleaseFilter () const;

    ReleaseFilter_type&
    ReleaseFilter ();

    void
    ReleaseFilter (const ReleaseFilter_type& x);

    // Constructors.
    //
    Generator (const Name_type&,
               const Sample_type&,
               const SampleStart_type&,
               const SampleEnd_type&,
               const Looping_type&,
               const Gain_type&,
               const Channel_type&,
               const Note_type&,
               const MinNote_type&,
               const MaxNote_type&,
               const MinVelocity_type&,
               const MaxVelocity_type&,
               const VelocityFactor_type&,
               const AttackGain_type&,
               const DecayGain_type&,
               const SustainGain_type&,
               const ReleaseGain_type&,
               const Filter_type&,
               const FreqFilter_type&,
               const QFilter_type&,
               const KeyFollowFilter_type&,
               const AttackFilter_type&,
               const DecayFilter_type&,
               const SustainFilter_type&,
               const ReleaseFilter_type&);

    Generator (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Generator (const Generator& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Generator*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Generator ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Name_type > Name_;
    ::xsd::cxx::tree::one< Sample_type > Sample_;
    ::xsd::cxx::tree::one< SampleStart_type > SampleStart_;
    ::xsd::cxx::tree::one< SampleEnd_type > SampleEnd_;
    ::xsd::cxx::tree::one< Looping_type > Looping_;
    ::xsd::cxx::tree::one< Gain_type > Gain_;
    ::xsd::cxx::tree::one< Channel_type > Channel_;
    ::xsd::cxx::tree::one< Note_type > Note_;
    ::xsd::cxx::tree::one< MinNote_type > MinNote_;
    ::xsd::cxx::tree::one< MaxNote_type > MaxNote_;
    ::xsd::cxx::tree::one< MinVelocity_type > MinVelocity_;
    ::xsd::cxx::tree::one< MaxVelocity_type > MaxVelocity_;
    ::xsd::cxx::tree::one< VelocityFactor_type > VelocityFactor_;
    ::xsd::cxx::tree::one< AttackGain_type > AttackGain_;
    ::xsd::cxx::tree::one< DecayGain_type > DecayGain_;
    ::xsd::cxx::tree::one< SustainGain_type > SustainGain_;
    ::xsd::cxx::tree::one< ReleaseGain_type > ReleaseGain_;
    ::xsd::cxx::tree::one< Filter_type > Filter_;
    ::xsd::cxx::tree::one< FreqFilter_type > FreqFilter_;
    ::xsd::cxx::tree::one< QFilter_type > QFilter_;
    ::xsd::cxx::tree::one< KeyFollowFilter_type > KeyFollowFilter_;
    ::xsd::cxx::tree::one< AttackFilter_type > AttackFilter_;
    ::xsd::cxx::tree::one< DecayFilter_type > DecayFilter_;
    ::xsd::cxx::tree::one< SustainFilter_type > SustainFilter_;
    ::xsd::cxx::tree::one< ReleaseFilter_type > ReleaseFilter_;
  };

  class Jass: public ::xml_schema::type
  {
    public:
    // Polyphony
    // 
    typedef ::xml_schema::non_negative_integer Polyphony_type;
    typedef ::xsd::cxx::tree::traits< Polyphony_type, char > Polyphony_traits;

    const Polyphony_type&
    Polyphony () const;

    Polyphony_type&
    Polyphony ();

    void
    Polyphony (const Polyphony_type& x);

    // Generator
    // 
    typedef ::Jass::Generator Generator_type;
    typedef ::xsd::cxx::tree::sequence< Generator_type > Generator_sequence;
    typedef Generator_sequence::iterator Generator_iterator;
    typedef Generator_sequence::const_iterator Generator_const_iterator;
    typedef ::xsd::cxx::tree::traits< Generator_type, char > Generator_traits;

    const Generator_sequence&
    Generator () const;

    Generator_sequence&
    Generator ();

    void
    Generator (const Generator_sequence& s);

    // Constructors.
    //
    Jass (const Polyphony_type&);

    Jass (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Jass (const Jass& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual Jass*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Jass ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Polyphony_type > Polyphony_;
    Generator_sequence Generator_;
  };
}

#include <iosfwd>

namespace Jass
{
  ::std::ostream&
  operator<< (::std::ostream&, const Generator&);

  ::std::ostream&
  operator<< (::std::ostream&, const Jass&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Jass
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::Jass::Jass >
  Jass_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Jass
{
  // Serialize to std::ostream.
  //

  void
  Jass_ (::std::ostream& os,
         const ::Jass::Jass& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  Jass_ (::std::ostream& os,
         const ::Jass::Jass& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  Jass_ (::std::ostream& os,
         const ::Jass::Jass& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Jass_ (::xercesc::XMLFormatTarget& ft,
         const ::Jass::Jass& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  Jass_ (::xercesc::XMLFormatTarget& ft,
         const ::Jass::Jass& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  Jass_ (::xercesc::XMLFormatTarget& ft,
         const ::Jass::Jass& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Jass_ (::xercesc::DOMDocument& d,
         const ::Jass::Jass& x,
         ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Jass_ (const ::Jass::Jass& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const Generator&);

  void
  operator<< (::xercesc::DOMElement&, const Jass&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // JASS_HXX
